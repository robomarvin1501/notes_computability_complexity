\documentclass{article}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{mathtools}
\usepackage{blindtext}
\usepackage{multicol}
\usepackage{graphicx}
\usepackage{placeins}
\usepackage{algpseudocode}
\usepackage{algorithm}
\usepackage{booktabs}
\usepackage{float}
\usepackage{bbm}
\usepackage[bookmarks=true]{hyperref}
\usepackage{bookmark}
\usepackage{tikz}
\usetikzlibrary{automata, positioning, arrows}
% \usepackage{stix}
\graphicspath{ {./images/} }
\usepackage[bottom=0.5cm, right=1.5cm, left=1.5cm, top=1.5cm]{geometry}

\newtheorem{theorem}{Theorem}
\newtheorem{exercise}{Exercise}
\newtheorem{example}{Example}
\newtheorem{definition}{Definition}[section]

\newcommand{\R}{\ensuremath{\mathbb{R}}}
\newcommand{\N}{\ensuremath{\mathbb{N}}}
\newcommand{\Z}{\ensuremath{\mathbb{Z}}}
\newcommand{\p}{\ensuremath{\mathbb{P}}}
\newcommand{\E}{\ensuremath{\mathbb{E}}}
\newcommand{\F}{\ensuremath{\mathcal{F}}}
\newcommand{\1}{\ensuremath{\mathbbm{1}}}
\newcommand{\B}{\ensuremath{\mathbbm{B}}}

\title{Lecture 9}
\author{Gidon Rosalki}
\date{2025-05-25}


\begin{document}
\maketitle
\section{Overview}\label{sec:Overview} % (fold)
\begin{theorem}[Cook-Levin Theorem]
    \[
        SAT \in NPC
    \]
\end{theorem}

\begin{theorem}[]
    Both definitions of NP are equivalent.
\end{theorem}
% section Overview (end)

\section{Cook Levin}\label{sec:Cook Levin} % (fold)
Let us recall that \[
    SAT = \left\{\varphi : \text{There is a CNF formula that satisfies $\varphi$, which is to say $\varphi$ is a boolean formula,
    constructed from literals, which  all contain variables, conjoined by logical ors, and each literal is connected by
logical ands} \right\}
\]
We have shown previously that $SAT \in NP,\ SAT \leq_p 3SAT$, and therefore $SAT \in NPC \implies 3SAT \in NPC$. We need
to show that for every $L \in NP$, $L \leq_p SAT$. To do this, we need a function, that translates from $w$ to
$\varphi$, such that \[
    w \in L \Leftrightarrow \varphi \in SAT
\]
The problem is we know not what is $L$. All that we know is that $L \in NP$, which is to say that there is a TM $M$, non
deterministic and polynomial that recognises $L$. \\
Be warned, this is a \textit{long} proof, we are going to spend about 1 to 2 hours on it. There are harder proofs that
we have seen, and that we will see, but this is long, with a great many parts. \\

\subsection{Configuration reminder}\label{sub:Configuration reminder} % (fold)
\begin{definition}[Configuration]
    A configuration is a description of the overall state during a run, or formally: \[
        c = u q v : u, v \in \Gamma^* \land q \in Q
    \]
    The configuration $c$ describes the general state where the internal state of the machine is $q$, the contents of the
    tape is $uv$, and the head is pointed at the first letter of $v$.
\end{definition}
For example, the initial configuration of the run $M \left(w\right)$ is \[
    c_0 = q_0 w
\]

An accepting configuration is a configuration that contains the state $q_{\text{acc} }$, and a rejection configuration
is a configuration that contains the state $q_{\text{rej} }$.
% subsection Configuration reminder (end)

\subsection{Sub theorem}\label{sub:Sub theorem} % (fold)
\begin{theorem}[]
    W.l.o.g. The machine $M$ has a single accepting configuration.
    \begin{proof}[Proof ]
        We will show how to change $M$ such that it will have a single accepting configuration, and the runtime will
        remain polynomial. We will change every state $q_{\text{acc} }$ to $q_{\text{almost accept}} $, and in this
        state $M$ will delete the whole tape, and return the head to the beginning of the tape, and move to state
        $q_{\text{acc} }$. It is clear that there is now only a single accepting state, and additionally we will note
        that the runtime is extended by at most a polynomial of the length of the input, since the tape that we need to
        delete contained at most a polynomial number of cells.
    \end{proof}
\end{theorem}

\begin{theorem}[]
    W.l.o.g. The machine $M$ only has a single rejecting configuration
    \begin{proof}[Proof ]
        Similar to the previous proof.
    \end{proof}
\end{theorem}
% subsection Sub theorem (end)

\subsection{Table construction}\label{sub:Table construction} % (fold)
We will create a run of $M \left(w\right)$ by using a table, where every row of the table is matched to a configuration,
starting from row 0 representing the configuration $c_0$. A run will match to a correct filling of the table, and if the
final row is an accepting configuration, then the run accepts. \\
We will build a formula that checks if the filling of the table is correct, and if it finishes in an accepting
configuration. So, we have a table, with $t + 1$ rows, starting at the initial configuration $c_0$, and running until
$c_t$, where \[
    t = poly \left(n\right) : n = \left|w\right|
\]
We also know that the width of the table, which represents the space used, is also limited in size by $t$, for similar
reasoning. Every cell within the table will contain a letter from $\Gamma \cup Q$. The height of the table $t$ is bound
by the runtime, and the width of the table is bound by the length of the longest configuration, which is to say is bound
by the space, and is therefore also bound by $t$. \\
Filling the table is correct if: \begin{itemize}
    \item In row 0 we have the starting configuration
    \item In row $t$ we have a final configuration, (accepting if the run accepts)
    \item For all $0 \leq i < t$ it holds that $c_i, c_{i + 1}$ are following configurations, which is to say are
        suitable to a possible step in the run of $M$. This is to say that $c_i, c_{i + 1}$ are equivalent in almost
        every place, aside from around the location of the head of the machine, and there the differences need to come
        from the function $\delta$ of $M$
\end{itemize}
So in the first row, which represents $c_0$, we expect to see $q_0$ in the first cell, the letters of the word, and then
the rest of the row filled with \textvisiblespace. In the bottom row, $c_t$, we expect to see $q_{\text{acc} }$ (if the
run accepts), followed by \textvisiblespace for the rest of the row. \\
The immediate location surrounding the head, if the head is at $c_{i,j}$, then it is all the cells in $i, i + 1$, and in
$j - 1, j, j + 1$, since those are all the cells that can be changed by the machine, and to which the head can move.
% subsection Table construction (end)
The main concept is now understood, so it remains to show: \begin{enumerate}
    \item How to formalise all the checks: \begin{itemize}
            \item Of the 0th row
            \item Of the $t$th row
            \item Of all the collections of 6 boxes (the immediate surroundings of the head between $c_i$ and $c_{i + 1}$
        \end{itemize}
    \item How to convert all the above to CNF literals, and in particular into boolean variables
    \item How to create a CNF formula using a TM $M'$ which is deterministic, and polynomial
    \item To prove correctness, and runtime
\end{enumerate}

\subsection{Building and checking correctness for filling the table}\label{sub:Building and checking correctness for filling the table} % (fold)
We will call the cells in the table $x_{i,j}$, where $x_{0,0}$ is the upmost, and leftmost cell, and $x_{t,t}$ is the
rightmost, bottom cell. \\
\subsubsection{Checking row 0}\label{sec:Checking row 0} % (fold)
So we want to check \[
    \varphi_{\text{init}} \left(x_{0,0}, x_{0,1}, \dots, x_{0, t}\right) = \left(x_{0,0} = q_0\right) \land
    \displaystyle\land_{j = 1}^n \left(x_{0,j} = w_j\right) \land \displaystyle\land_{j = n + 1}^t \left(x_{0, j} =
    \text{\textvisiblespace} \right)
\]
We will note that if next every cell is translated to a CNF formula, then $\varphi_{\text{init}}$ will be a CNF formula
% subsubsection Checking row 0 (end)

\pagebreak
\subsubsection{checking row t}\label{sec:checking row t} % (fold)
\[
    \varphi_{\text{acc} } \left(x_{t, 0}, \dots, x_{t, t}\right) = \left(x_{t, 0} = q_{\text{acc} }\right) \land
    \land_{j = 1}^t \left(x_{t, j} = \text{\textvisiblespace} \right)
\]
% subsubsection checking row t (end)

We want a way to show that 2 continuous rows are suitable to 2 continuous configurations, or rather a correct filling
for a group of 6 cells is $\forall a, b, c \in \Gamma$: \begin{table}[h!]
     \centering
     \begin{tabular}{|c|c|c|}
         \hline
         a & b & c \\ \hline
         a & b & c \\ \hline
     \end{tabular}
     \caption{6 collection in table}
\end{table}
What are the correct ways to fill the 6 cell grouping when the area undergoes a change? We will look at the function
$\left(q_2, b, R\right) \in \delta \left(q_1, a\right)$
\begin{table}[h!]
     \centering
     \begin{tabular}{|c|c|c|}
         \hline
         $q_1$ & a & c \\ \hline
         b & $q_2$ & c \\ \hline
     \end{tabular}
     \caption{Possible filling, $\forall c \in \Gamma$}
\end{table}

\begin{table}[h!]
     \centering
     \begin{tabular}{|c|c|c|}
         \hline
         c & $q_1$ & a \\ \hline
         c & b & $q_2$ \\ \hline
     \end{tabular}
     \caption{Possible filling $\forall c \in \Gamma$}
\end{table}


\begin{table}[h!]
     \centering
     \begin{tabular}{|c|c|c|}
         \hline
         d & c & $q_1$ \\ \hline
         d & c & b \\ \hline
     \end{tabular}
     \caption{Possible filling $\forall c, d \in \Gamma$}
\end{table}
where here we have $a$, and $q_2$ off the rights of the top and bottom rows, accordingly.

\begin{table}[h!]
     \centering
     \begin{tabular}{|c|c|c|}
         \hline
         a & c & d \\ \hline
         $q_2$ & c & d \\ \hline
     \end{tabular}
     \caption{Possible filling $\forall c, d \in \Gamma$}
\end{table}
where we have $q_1$ and $b$ off the left of the top and bottom rows, accordingly. \\
We may similarly add checks for all the correct fillings of this group of 6, where the instruction finishes with an
order to move to the right. \\
We will define a check for the 6 cells \[
    \varphi_{\text{legal} }^{i,j} \left(x_{i, j}, x_{i, j+ 1}, x_{i, j + 2}, x_{i + 1, j}, x_{i + 1, j+ 1}, x_{i + 1, j + 2}\right)
\]
where we check if the filling is correct according to at least one of the options that we described before. \[
    \varphi = \varphi_{\text{init}} \land \varphi_{\text{acc} } \land \land_{i = 0}^t \land_{j = 1}^t
    \varphi_{\text{legal}}^{i,j}
\]
Where the test $\varphi_{\text{legal}}^{i,j}$ returns true \textbf{if and only if} The placement of the 6 relevant
variables if a placement that is allowed within the placements of $\left(\Gamma \cup Q\right)^6$. \\
We want to translate everything into booleans, which is to say: \begin{itemize}
    \item Every variable in the table $x_{i, j}$ will be switched into a set of boolean variables
    \item Every check we want to formulate into : \begin{enumerate}
        \item A formula using boolean variables
        \item In the style of CNF
    \end{enumerate}
\end{itemize}
For every original variable $x_{i, j}$, we need $\left\lceil \log_2 \left(\left|\Gamma\right| + \left|Q\right|\right)
\right\rceil $ boolean variables. We will use the circumflex symbol to represent the boolean version of the formulas
from the previous step: \[
    \varphi_{\text{init}}  \left(x_{0, 0}, \dots, x_{0, t}\right)
\]
has only one requirement for each variable, therefore, $\hat{\varphi}_{\text{init}} $ also requires the same thing. \\
Similarly, we can also describe $\hat{\varphi}_{\text{acc}} $ as a CNF formula. We therefore only need to handle
$\varphi_{\text{legal}} $. \\
For every placement of 6 original variables, there is a suitable placement for the boolean variables that encode them.
For every such row we want the formula to return true if the value for the 6 is correct, and false otherwise. This is to
say, we have acquired a truth table of the formula $\hat{\varphi}_{\text{legal}}^{i,j}$, and we want to find a CNF
representation that agrees with this truth table. If we did not need it to be CNF structure, we could solve this as with
truth tables in the past, DNF, which is to say, for every row that is true, we create a literal where every variable is
connected by $\land$, and we connect the literals together with $\lor$. \\
In order to create a CNF formula, we can create the DNF formula for every row that is \textbf{false}, and take the
inverse of the resulting formula (DeMorgan), which will give us a CNF formula for $\hat{\varphi}_{\text{legal}}^{i,j}$. \\
So:
\[
    \hat{\varphi} = \hat{\varphi}_{\text{init}} \land \hat{\varphi}_{\text{acc}} \land \land_{i,j = 0}^t
    \hat{\varphi}_{\text{legal}}^{i,j}
\]
With that we have finished to show that there exists a formula $\hat{\varphi}$ which is a CNF formula, and that it is
satisfiable \textbf{if and only if} $w \in L$. Good job Cook and Levin for creating this, and good job to us for
understanding it. We now need to show that there exists a reduction $L \leq_p SAT$, which is to say that there exists a
TM $M$, that is both deterministic, and polynomial, that for a given input $w$, will return $\hat{\varphi}$, such that
\[
    w \in L \Leftrightarrow \hat{\varphi} \in SAT
\]
which is to say, to show how we create $\hat{\varphi}$ from $w$ by a TM $M$ which deterministic, and polynomial.
\begin{enumerate}
    \item $M'$ will compute $t$ (some polynomial on $n = \left|w\right|$). This is easy in polynomial time
    \item $M'$ will create $\hat{\varphi} \land \hat{\varphi}$, both are easy in polynomial time
    \item $M'$ will run a double loop (on $i, j$ from 0 to $t$), and for each $i, j$ will print a copy of
        $\hat{\varphi}_{\text{legal} }^{i,j}$. We will note that all the formulas of
        $\hat{\varphi}_{\text{legal}}^{i,j}$ are exactly the same, beyond a change in the names of the variables. This
        is to say that the formula $\hat{\varphi}_{\text{legal}} $ can be part of the encoding of the machine $M'$, and
        $M'$ only needs to print this encoding again and again with the update $i, j$, and between every 2 copies, the
        symbol $\land$.
\end{enumerate}
Note, the polynomial that will be used to calculate $t$ from $n = \left|w\right|$ exists, and therefore can be encoded
within $M'$.
% subsection Building and checking correctness for filling the table (end)

\subsection{Runtime}\label{sub:Runtime} % (fold)
$M'$ needs to print $\hat{\varphi}_{\text{init}}, \hat{\varphi}_{\text{acc}} $, both in polynomial time. Additionally,
$M'$ needs to print for each value $0 \leq i, j < t$ $\hat{\varphi}_{\text{legal}}^{i,j}$. This is $t^2$ times, which is
a polynomial number of times. Overall, we thus have a polynomial runtime
% subsection Runtime (end)

\subsection{Correctness}\label{sub:Correctness} % (fold)
If $w \in L$, then there exists an accepting run fo $M \left(w\right)$, therefore there exists a correct way to fill the
original table where in the first row $c_0$ is the starting configuration, in the final row is the accepting
configuration, and every two subsequent rows are matched to subsequent configurations in the run. Therefore, every check
will pass. Therefore, there exists a placement o boolean variables such that every CNF check passes, which is to say
that is a satisfying placement for $\varphi$. \\
If $w \notin L$, then every way to fill the original table is either suitable to a legal run that finishes in a
configuration that rejects, or is not suitable to a legal run. In every case, at least one check of
$\varphi_{\text{init}}, \varphi_{\text{acc}} $ or $\varphi_{\text{legal}}^{i,j}$ fails. Therefore, at least one CNF
formula of these checks of boolean variables returns false, and therefore every placement does not satisfy
$\hat{\varphi}$. This is to say $\hat{\varphi} \notin SAT$.
% subsection Correctness (end)
% section Cook Levin (end)

\section{Different definitions of NP}\label{sec:Different definitions of NP} % (fold)
We saw 2 definitions for NP: \begin{enumerate}
    \item NP: All the languages $L$ which are recognised by a non deterministic, polynomial TM $M$
    \item NP': All the languages $L$ such that there is a polynomial, deterministic verifier $M'$
\end{enumerate}
\subsection{Reminder}\label{sub:Reminder} % (fold)
A verifier $M'$ for a language $L$ is a machine that accepts $w, c$ and enables the following: If $w \in L$, then there
exists $c$ such that $M \left(w, c\right) = q_{\text{acc}} $, and if $w \notin L$, then for all $c$, $M \left(w,
c\right) = q_{\text{rej}} $. Additionally, for every $c$, $M \left(w, c\right)$ runs in polynomial time by the length of
$\left|w\right|$.
% subsection Reminder (end)

\subsection{Theorem}\label{sub:Theorem} % (fold)
We want to prove that $NP = NP'$. This is useful because it is easier to show that something is in NP by creating a
verifier, than to create an NTM, and if we prove once that they are equivalent, then we can use that forevermore. \\

$NP' \subseteq NP$: We are given a language $L$, which has a deterministic polynomial verifier, which is to say a
machine $M'$ suitable to the above definition. We want, using $M'$, to build a machine nil
M, which is polynomial, and none deterministic, that recognises $L$. W.l.o.g. The length $\left|c\right|$ is bound by
a polynomial of $\left|w\right|$. Explanation: $M'$ runs in polynomial time of $\left|w\right|$, and therefore cannot
read more than a polynomial number of letters from $c$. \\
$M$ will run as follows: Create a string $c'$, of length polynomial in $\left|w\right|$, in a non deterministic manner.
Then run like $M'$ on $w, c$. \\
\textbf{Correctness}: If $w \in L$, then there is $c$ such that $M' \left(w, c\right) = q_{\text{acc}} $, therefore
there is an assumption of $M$ for the letter values of $c$ that will cause $M$ to return $q_{\text{acc}} $. IF $w \notin
L$, then for every $c$, $M' \left(w, c\right) = q_{\text{rej}} $, and therefore for all $c$ that $M$ will create, the
run will end in $q_{\text{rej}} $. \\
\textbf{Runtime}: Create $c$ is bound by the length of $c$, which is to say wlog is bound from above by a polynomial in
$\left|w\right|$. Additionally, the step of running $M' \left(w, c\right)$ is known to take time that is polynomial in
$\left|w\right|$. In total, we have a polynomial runtime in $\left|w\right|$. \\

$NP \subseteq NP'$: Given a language $L$, which has an MT $M$, that is polynomial, and non deterministic. We want to use
it to build a TM $M'$ which is a polynomial verifier for $L$. We need to create a function \[
    \delta : Q \times \Gamma \to P \left[Q \times \Gamma \times \left\{L, R\right\}\right]
\]
The number of options $k$ for choosing non deterministically in every step of the run is at most $\left|Q\right| \cdot
\left|\Gamma\right| \cdot 2$. \\
We will look at the run of $M \left(w\right)$. In every step of the run there is a non deterministic choice made by the
function $\delta$. This defines a string in which every letter is a number between 1 and $k$. The length of the string
is the number of steps of the run, which is to say, polynomial in $\left|w\right|$. We can define a TM $M'$, which is
deterministic, which accepts the input $w$, and a string such as this, called $c$, which will simulate $M
\left(w\right)$, where taking a non deterministic step, is a step chosen according to a letter in $c$. That is to say
$M'$ runs like $M$, at every step similar to $M$, reads an additional letter from $c$, and uses that letter to choose
which step of $\delta$ to run. We will note that $M'$ is deterministic. \\
\textbf{Correctness}: If $w \in L$, then there exists an accepting run of $M \left(w\right)$, which is to say that there
exists a series of non deterministic choices of $\delta$ that cause $M$ to arrive at $q_{\text{acc}} $, and therefore if
$c$ is the string that describes this order of choices, then $M' \left(w, c\right)$ will return $q_{\text{acc}} $. \\
If $w \notin L$, then every run of $M \left(w\right) = q_{\text{rej}} $, therefore for every string $c$, it holds that
$M' \left(w, c\right) = q_{\text{rej}} $. \\
\textbf{Runtime}: The length of $c$ is polynomial in $\left|w\right|$. The number of steps of the simulation that $M'$
does is the number of steps of $M \left(w\right)$, which is to say polynomial in the length of $w$. Simulation of each
step requires at most the length of the tape, which is to say at most, polynomial in $\left|w\right|$. In total, runtime
is polynomial in $\left|w\right|$.
% subsection Theorem (end)
% section Different definitions of NP (end)


\end{document}
