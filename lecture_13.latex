\documentclass{article}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{mathtools}
\usepackage{blindtext}
\usepackage{multicol}
\usepackage{graphicx}
\usepackage{placeins}
\usepackage{algpseudocode}
\usepackage{algorithm}
\usepackage{booktabs}
\usepackage{float}
\usepackage{bbm}
\usepackage[bookmarks=true]{hyperref}
\usepackage{bookmark}
\usepackage{tikz}
\usetikzlibrary{automata, positioning, arrows}
% \usepackage{stix}
\graphicspath{ {./images/} }
\usepackage[bottom=0.5cm, right=1.5cm, left=1.5cm, top=1.5cm]{geometry}

\newtheorem{theorem}{Theorem}
\newtheorem{exercise}{Exercise}
\newtheorem{example}{Example}
\newtheorem{definition}{Definition}[section]

\newcommand{\R}{\ensuremath{\mathbb{R}}}
\newcommand{\N}{\ensuremath{\mathbb{N}}}
\newcommand{\Z}{\ensuremath{\mathbb{Z}}}
\newcommand{\p}{\ensuremath{\mathbb{P}}}
\newcommand{\E}{\ensuremath{\mathbb{E}}}
\newcommand{\F}{\ensuremath{\mathcal{F}}}
\newcommand{\1}{\ensuremath{\mathbbm{1}}}
\newcommand{\B}{\ensuremath{\mathbbm{B}}}

\title{Lecture 13}
\author{Gidon Rosalki}
\date{2025-06-29}


\begin{document}
\maketitle

\begingroup
\centering
{\color{red}\bfseries\LARGE This content will not appear in the exam this year! \par}
\endgroup

\vspace{1cm}  % Add space before the rest of the content

\section{Complexity sets, with randomness}\label{sec:Complexity sets, with randomness} % (fold)
We want to extend the TM model such that we can use random algorithms, which include a runtime. This means that the
results of the algorithm can be dependent on random coin flips. We will add to the TM a tape of random coins. At the
start of a run, this tape will only include 1 or 0, in every cell, at equal probability, independently in each cell.

We will define the complexity set for this TM machine.

\begin{definition}[ZPP]
    This is the set of all the language $L$ such that they have a TM $M$ that decides $L$, in an expected time that is
    polynomial. That is to say, the runtime is on average (by the random coins), it is bound by a polynomial.
\end{definition}

\begin{theorem}[]
    \[
        P \subseteq ZPP
    \]
    \begin{proof}[Proof ]
        If $L \in P$, then there is a deterministic polynomial TM that decides it. We can add to this machine a coins
        tape, and so we get a machine that always runs in polynomial time, and thus also runs in expected polynomial
        time.
    \end{proof}
\end{theorem}

\begin{definition}[RP]
    The set RP contains all the languages $L$ such that there exists a TM $M$ that runs in polynomial time (always). It
    holds that \begin{itemize}
        \item $w \in L \implies \p \left[M \left(w\right) = q_{\text{acc}} \right] \geq \displaystyle\frac{1}{2}$
        \item $w \notin L \implies \p \left[M \left(w\right) = q_{\text{rej}} \right] = 1$
    \end{itemize}
\end{definition}

\begin{theorem}[]
    \[
        \text{RP} \subseteq \text{NP}
    \]
    \begin{proof}[Proof ]
        We will consider the polynomial recogniser for a language in NP, in comparison to a machine that is RP. In both
        cases: \begin{itemize}
            \item The runtime is polynomial
            \item If $w \notin L$, then it always holds that $M \left(w\right) = q_{\text{rej}} $
            \item If $w \in L$ then there is a run such that $M \left(w\right) = q_{\text{acc}} $. In the RP machine,
                the requirement is that half of the runs will return $q_{\text{acc}} $
        \end{itemize}
        Therefore, the RP machine is a specific case of a polynomial recogniser
    \end{proof}
\end{theorem}

\begin{theorem}[]
    P $\subseteq$ RP
    \begin{proof}[Proof ]
        In both cases, the machine runs in polynomial time. In both cases, the machine always responds $q_{\text{rej}}
        $ in the case where $w \notin L$. The machine in P will always return $q_{\text{acc}} $ when $w \in L$, and this
        means it returns $q_{\text{acc}} $ more than $\displaystyle\frac{1}{2}$ of the time.
    \end{proof}
\end{theorem}

\begin{definition}[coRP]
    The set coRP contains all the languages $L$ such that $\overline{L} \in $ RP. Or, in other words, $L \in \text{coRP}
    $ \textbf{if and only if} there exists a TM $M$ for $L$ such that: \begin{itemize}
        \item $M$ always runs in polynomial time
        \item For every $w \in L$, $M \left(w\right) = q_{\text{acc}} $
        \item For every $w \notin L$, it holds that $\p \left[M \left(w\right) = q_{\text{rej}} \right] \geq
            \displaystyle\frac{1}{2}$
    \end{itemize}
\end{definition}
Explanation: \begin{align*}
    L \in \text{coRP} &\Leftrightarrow \overline{L} \in \text{RP}  \\
                      &\Leftrightarrow \text{There is an RP machine for } \overline{L} \\
                      &\Leftrightarrow \text{There is a coRP machine for } L
\end{align*}
Where the final transition is possible from swapping the $q_{\text{acc}} $ and $q_{\text{rej}} $ states.

\begin{theorem}[]
    \[
        \text{RP} \cap \text{coRP} = \text{ZPP}
    \]
    \begin{proof}[Proof ]
        Below
    \end{proof}
\end{theorem}


\begin{definition}[]
    The set BPP contains all the languages $L$ such that there is a TM $M$ that runs in polynomial time, that correctly
    answers $\geq \displaystyle\frac{2}{3}$ (both ways, both for in and not in)
\end{definition}
This is to say: \begin{gather*}
    w \in L \implies \p \left[M \left(w\right) = q_{\text{acc}} \right] \geq \displaystyle\frac{2}{3} \\
    w \notin L \implies \p \left[M \left(w\right) = q_{\text{rej}} \right] \geq \displaystyle\frac{2}{3}
\end{gather*}

\begin{exercise}
    \[
        \text{P}  \subseteq \text{BPP}
    \]
    \begin{proof}[Solution]
        In both cases, the machine runs in polynomial time, and a deterministic polynomial machine that decides $L$ will
        necessarily guarantee that the probability to respond correctly is always greater than
        $\displaystyle\frac{2}{3}$.
    \end{proof}
\end{exercise}

\begin{theorem}[]
    \[
        \text{BPP}  \subseteq \text{EXP}
    \]
    \begin{proof}[Proof ]
        Let there be $L \in $ BPP, and $M$ a BPP machine for $L$. We will use $M$ to build $M'$, that decides $L$ in
        exponential time. \\
        $M'$ will run as follows: \\
        Run over all the options for random coin flips. For every possibility (for a string over $\left\{0, 1\right\}$),
        $M'$ will run $M \left(w\right)$. $M'$ will count how many times it receives $q_{\text{acc} }$, and answer
        according to the majority. \\
        \textbf{Correctness}: Trivial, since a run over a particular coin tape is deterministic. \\
        \textbf{Runtime}: Every run of $M \left(w\right)$ requires polynomial time. There are $2^l$ runs, where $l$ is
        the number of cells on the coin tape. However, since $M$ runs in polynomial time, it can only manage to read at
        most a polynomial number of coins, which is to say $l \leq poly \left(n\right)$, and so in total the runtime of
        $M'$ is \[
            \leq poly \left(n\right) \cdot 2^{poly \left(n\right)}
        \]
        which is to say, limited by an exponential value of $n$.
    \end{proof}
\end{theorem}

Our next theorem is that RP $\subseteq$ BPP. However, we will first show that the size of the mistake is a constant, as
small as we would like. We will write $RP \left(p\right)$ like the set RP, but with the one way mistake $\leq p$.
Therefore, RP $= RP \left(\displaystyle\frac{1}{2}\right)$

\begin{theorem}[]
    \[
        RP = RP \left(\displaystyle\frac{1}{2}\right) = RP \left(\displaystyle\frac{1}{4}\right)
    \]
    Which is to say $L \in RP$ \textbf{if and only if} there is a TM that runs in polynomial time, and enables \begin{gather*}
        w \in L \implies \p \left[M \left(w\right) = q_{\text{acc}} \right] \geq \displaystyle\frac{3}{4}  \\
        w \notin L \implies \p \left[M \left(w\right) = q_{\text{rej}} \right] = 1
    \end{gather*}

    \begin{proof}[Proof ]
        It is clear that $RP \left(\displaystyle\frac{1}{4}\right) \subseteq RP \left(\displaystyle\frac{1}{2}\right)$.
        We now need to show that $RP \left(\displaystyle\frac{1}{2}\right) \subseteq RP
        \left(\displaystyle\frac{1}{4}\right)$: Let there be $L \in RP$, which is to say that there exists a TM $M$ that
        runs in polynomial tie, and there is a one way failure of probability $\leq \displaystyle\frac{1}{2}$. We will
        use it to make a TM $M'$ that runs in polynomial time, with one way failure probability $\leq
        \displaystyle\frac{1}{4}$. \\
        \textbf{Construction}: $M'$ will run as follows: Run $M \left(w\right)$ twice, and return $q_{\text{rej}} $
        \textbf{if and only if} in both runs $M \left(w\right) = q_{\text{rej}} $.
        \textbf{Runtime}: Trivial, runtime of $M$ is polynomial, and so too the runtime of $M'$ \\
        \textbf{Correctness}: If $w \notin L$, then it always holds that $M \left(w\right) = q_{\text{rej}} $, and so
        $M' \left(w\right)= q_{\text{rej}} $. If $w \in L$, then $\p $
        \begin{gather*}
            w \notin L \implies \p \left[M \left(w\right) = q_{\text{rej}} \right] = 1 \implies \p \left[M'
            \left(w\right) = q_{\text{rej}} \right]= 1 \\
            w \in L \implies \p \left[M \left(w\right) = q_{\text{rej}} \right] \leq \displaystyle\frac{1}{2} \implies
            \p \left[M' \left(w\right) = q_{\text{rej}} \right] \leq \left(\displaystyle\frac{1}{2}\right)^2 = \displaystyle\frac{1}{4}
        \end{gather*}
    \end{proof}
\end{theorem}

So, to return to the theorem we wanted

\begin{theorem}[]
    \[
        RP \subseteq BPP
    \]
    \begin{proof}[Proof ]
        Through the above theorem:
        \begin{align*}
            RP &= RP \left(\displaystyle\frac{1}{3}\right)
        \end{align*}
        Which is to say, theer is a polynomial TM with a one way failure rate that is $\leq \displaystyle\frac{1}{3}$,
        which is a specific case of a machine BPP, where we can have a two way failures rate of $\leq
        \displaystyle\frac{1}{3}$.
    \end{proof}
\end{theorem}

\begin{theorem}[]
    \[
        coRP \subseteq BPP
    \]
    \begin{proof}[Proof ]
        \begin{theorem}[]
            BPP is closed to inverse, which is to say BPP = coBPP.
            \begin{proof}[Proof ]
                By swapping the states $q_{\text{acc}} $ and $q_{\text{rej}} $, on a BPP machine, we get a BPP machine
                for the inverse language
            \end{proof}
        \end{theorem}

        So from that helpful theorem, we can now show:
        \begin{align*}
            L \in coRP &\implies \overline{L} \in RP \\
                       &\implies \overline{L} \in BPP \\
                       &\implies L \in BPP
        \end{align*}
    \end{proof}
\end{theorem}

What about NP? \begin{align*}
    P \subseteq ZPP \subseteq RP \subseteq NP \subseteq EXP
\end{align*}

We are left with the theorem that we did not prove earlier:
\begin{theorem}[]
    \[
        \text{RP} \cap \text{coRP} = \text{ZPP}
    \]
    \begin{proof}[Proof ]
        We will assume that $L \in RP \cap coRP$, and show that $L \in ZPP$. That is to say that there is an RP machine
        for $L$, and that there is a coRP machine for $L$. Both machines run in polynomial time, both with a (different)
        one way failure rate. \begin{table}[H]
             \centering
             \begin{tabular}{|c|c|c|}
                 \hline
                  & $M_1$ & $M_2$ \\ \hline
                 $w \in L$ & $\p \left[M_1 \left(w\right) = q_{\text{acc}} \right] \geq \frac{1}{2}$ &  $\p \left[M_2 \left(w\right) = q_{\text{acc}} \right] = 1$\\ \hline
                 $w \notin L$ & $\p \left[M_1 \left(w\right) = q_{\text{rej}} \right] = 1$ & $\p
                 \left[M_2 \left(w\right) = q_{\text{rej}} \right] \geq \frac{1}{2}$ \\ \hline
             \end{tabular}
             \caption{}
        \end{table}
        We want to show with $M_1$ and $M_2$ to create $M$ which is a ZPP machine for $L$. This is to say,
        \textbf{always} responds correctly.  The runtime of $M$ has the expected runtime of polynomial (by the coins).
        \\
        \textbf{Construction}: $M$ will run as follows: \begin{enumerate}
            \item Run $M_1 \left(w\right)$. If $M_1$ responds $q_{\text{acc}} $, then return $q_{\text{acc}} $
            \item Run $M_2 \left(w\right)$. If $M_2$ responds $q_{\text{rej}} $, then return $q_{\text{rej}} $
            \item Return to (1)
        \end{enumerate}
        \textbf{Correctness}: If in some step, $M_1 \left(w\right) = q_{\text{acc}} $, then necessarily $w \in L$, and
        therefore the response of $M$ is correct. If in some step $M_2 \left(w\right) = q_{\text{rej}} $, then
        necessarily $w \notin L$, and therefore the response of $M$ is correct. \\
        \textbf{Runtime}: We will assume that $w \in L$. The runtime of $M$ is the runtime of both the machines, times
        the number of times that $M_1 \left(w\right)$ will return $q_{\text{rej}} $. We will use $i$ to mark the number
        of times that this occurred. \[
            \p \left[M \left(w\right) = q_{\text{rej}} \right] \leq \displaystyle\frac{1}{2}
        \]
        Therefore \[
            \p \left[\# \left(M \left(w\right) = q_{\text{rej}} \right) = i\right] \leq
            \left(\displaystyle\frac{1}{2}\right)^i
        \]
        and so the expected runtime is \begin{align*}
            \leq \displaystyle\sum_{i = 0}^{\infty} \left(\displaystyle\frac{1}{2}\right)^i \cdot poly \left(n\right)
            \cdot i &= \theta \left(1\right) \cdot poly \left(n\right) \\
                    &= poly \left(n\right)
        \end{align*}
        So we have shown that $L \in RP \cap coRP \implies L \in ZPP$. \\

        We will now show \[
            L \in ZPP \implies L \in RP \cap coRP
        \]
        We will begin from $L \in ZPP \implies L \in RP$. That is to say, there is a TM $M$ that decides $L$ in
        polynomial time (on average), which we can use to build a TM $M_1$ that always runs in polynomial time, with a
        one way failure rate $\leq \displaystyle\frac{1}{2}$. To resolve this, we will recall Markov's inequality. For
        some non negative random variable $X$, \[
            \p \left[X > a \cdot \E \left[X\right]\right] \leq \displaystyle\frac{1}{a}
        \]
        We will build $M_1$ as follows: $M_1$ will run $M \left(w\right)$ with a counter for the number of steps, and
        will stop the run should it require more than $2 \cdot \E \left[\# \left(\text{number of steps} \right)\right]$.
        If $M$ stopped before this, $M_1$ will return its response, and if $M$ does not stop, then $M_1$ will return
        $q_{\text{rej}} $. \\
        \textbf{Runtime}: The runtime of $M_1$ is $2$ times the expected value of the runtime of $M$, and so is
        polynomial in $n$. \\
        \textbf{Correctness}: \begin{gather*}
            w \notin L \implies \p \left[M_1 \left(w\right) = q_{\text{rej}} \right] = 1 \\
        \end{gather*}
        If $w \in L$, then $M_1$ responds correctly \textbf{if and only if} $M \left(w\right)$ finishes running in time
        $\leq 2 \cdot$ the expected value, which is to say that $M$ responds incorrectly \textbf{if and only if} the
        runtime of $M \left(w\right) > 2 \cdot \E$. According to Markhov's inequality, this happens with a probability
        $\leq \displaystyle\frac{1}{2}$. This is to say, if $w \in L$, then \[
            \p \left[M' \left(w\right) = q_{\text{acc}} \right] \geq \displaystyle\frac{1}{2}
        \]
        We have finished showing that $ZPP \subseteq RP$. We need to show that $ZPP \subseteq coRP$, and then derive
        that $ZPP \subseteq RP \cap coRP$. In order to show that $ZPP \subseteq coRP$ we will build a coRP machine $M_2$
        . The construction is almost exactly the same as $M_1$, but instead if we stop the machine for counting too
        high, then $M_2$ will return $q_{\text{acc}} $
    \end{proof}
\end{theorem}

% section Complexity sets, with randomness (end)

\end{document}
