\documentclass{article}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{mathtools}
\usepackage{blindtext}
\usepackage{multicol}
\usepackage{graphicx}
\usepackage{placeins}
\usepackage{algpseudocode}
\usepackage{algorithm}
\usepackage{booktabs}
\usepackage{float}
\usepackage{bbm}
\usepackage[bookmarks=true]{hyperref}
\usepackage{bookmark}
\usepackage{tikz}
\usetikzlibrary{automata, positioning, arrows}
% \usepackage{stix}
\graphicspath{ {./images/} }
\usepackage[bottom=0.5cm, right=1.5cm, left=1.5cm, top=1.5cm]{geometry}

\newtheorem{theorem}{Theorem}
\newtheorem{exercise}{Exercise}
\newtheorem{example}{Example}
\newtheorem{definition}{Definition}[section]

\newcommand{\R}{\ensuremath{\mathbb{R}}}
\newcommand{\N}{\ensuremath{\mathbb{N}}}
\newcommand{\Z}{\ensuremath{\mathbb{Z}}}
\newcommand{\p}{\ensuremath{\mathbb{P}}}
\newcommand{\E}{\ensuremath{\mathbb{E}}}
\newcommand{\C}{\ensuremath{\mathcal{C}}}
\newcommand{\1}{\ensuremath{\mathbbm{1}}}
\newcommand{\B}{\ensuremath{\mathbbm{B}}}

\title{Lecture 8}
\author{Gidon Rosalki}
% \date{2025-05-18}
% \date{\today}


\begin{document}
\maketitle
\section{Reminders}\label{sec:Reminders} % (fold)
Hear me and rejoice mortal, for here are some reminders of definitions of complexity sets:

\begin{definition}[TIME]
    \[
        TIME \left(f \left(n\right)\right) = \left\{L \subseteq \Sigma^* : \text{There exists a deterministic TM that
        runs in } O \left(f \left(n\right)\right) \text{ and decides the language } L\right\}
    \]
\end{definition}

\begin{definition}[NTIME]
    \[
        NTIME \left(f \left(n\right)\right) = \left\{L \subseteq \Sigma^* : \text{There exists a non deterministic TM
        that runs in } O \left(f \left(n\right)\right) \text{ and decides the language } L\right\}
    \]
\end{definition}

For a non deterministic TM, for some word $w \in \Sigma^*$, there are different runs with different outcomes and
runtimes. We will say that $w \in L \left(M\right) $ \textbf{if and only if} there exists a run that ends in
$q_{\text{acc} }$. The runtime is the worst case between all the possible runs.

\begin{definition}[SPACE]
    \[
        SPACE \left(f \left(n\right)\right) = \left\{L \subseteq \Sigma^* : \text{There exists a deterministic TM that
        decides } L \text{ while using the space } O \left(f \left(n\right)\right)\right\}
    \]
\end{definition}

\begin{definition}[NSPACE]
    \[
        NSPACE \left(f \left(n\right)\right) = \left\{L \subseteq \Sigma^* : \text{There exists a non deterministic TM
        that decides } L \text{ while using the space } O \left(f \left(n\right)\right)\right\}
    \]
\end{definition}

$w \in L$ is defined similarly to $NTIME$, and space complexity according to the worst case of all the runs.


\begin{definition}[P]
    \[
        P = \displaystyle\bigcup_{k = 1}^{\infty}TIME \left(n^k\right)
    \]
    All the languages that can be decided in deterministic polynomial time.
\end{definition}

\begin{definition}[NP]
    \[
        NP = \displaystyle\bigcup_{k = 1}^{\infty}NTIME \left(n^k\right)
    \]
    All the languages that can be decided in nondeterministic polynomial time.
\end{definition}
"If you want to make a million dollars, there are easier ways than to prove equivalence of $P$ and $NP$"-Oded Schwartz,
May 2025.

\begin{definition}[EXP]
    \[
        EXP = \displaystyle\bigcup_{k = 1}^{\infty}TIME \left(2^{O \left(n^k\right)}\right)
    \]
\end{definition}

It is true that \[
    P \subseteq NP \subseteq EXP \subseteq R
\]

The first containment is because the DTM is a specific case of an NDTM. The second containment is left as an exercise for
the reader, since it is homework, and the third is because there is a deciding machine (happens to be also of
exponential runtime). \\
Reminder: We will say that there is a polynomial reduction from $A$ to $B$, and write $A \leq_p B$, if there exists a
procedure $f$, and TM $M_f$, such that $M_f$ computes $f$ in polynomial time, and also \[
    w \in A \Leftrightarrow f \left(w\right) \in B
\]
(Polynomial time by $\left|w\right|$).

\begin{theorem}[Reduction theorem]
    The reduction theorem for polynomial reductions: \begin{itemize}
        \item $A \leq_p B \land B \in P \implies A \in P$
    \end{itemize}
\end{theorem}
% section Reminders (end)

\section{Extension of reduction}\label{sec:Extension of reduction} % (fold)
\begin{theorem}[]
    \[
        A \leq_p B \land B \leq_p C \implies A \leq_p C
    \]

    \begin{proof}[Proof ]
        Since $A \leq_p B$, there exists a function $f$, and there exists a polynomial DTM $M_f$ which computes $f$,
        and \[
            w \in A \Leftrightarrow f \left(w\right) \in B
        \]
        Similarly, since $B \leq_p C$, there exists a function $g$, and there exists a polynomial DTM $M_g$, which
        computes $g$, and \[
            w \in B \Leftrightarrow g \left(w\right) \in C
        \]
        \begin{itemize}
            \item Construction: We will construct the machine $M_h$, which computes $h$, a reduction from $A$ to $C$,
                such that $M_h$ is a polynomial DTM. \\
                For an input $x \in A$, $M_h$ will compute $y = f \left(x\right)$, like $M_f$, and then compute $z = g
                \left(y\right)$, like $M_g$, and then return $z$. We need to show correctness, and polynomial runtime.
            \item Correctness: \begin{align*}
                    x \in A &\Leftrightarrow y = f \left(x\right) \in B \\
                            &\Leftrightarrow z = g \left(y\right) \in C
                \end{align*}
                Where the first follows from the correctness of $M_f$, and the second from the correctness of $M_g$.
            \item Runtime: The first step is running $M_f$, and it is known that $M_f$ is a polynomial DMT, which is to
                say it runs in $O \left(\left|x\right|^{k_1}\right)$, for some constant $k_1$. The second step is running the
                machine $M_g$, which is known to be a polynomial DTM, and therefore runs in $O
                \left(\left|y\right|^{k_2}\right)$, for some constant $k_2$. This is not good enough, since we need the
                runtime to be polynomial in the length of the input $x$, but we are also dependent on $y$, an internal
                variable. We need to find some bound for $y$, associated with $\left|x\right|$. We will note that the
                machine $M_f$ can only create an output $y$ of length that is at most the number of steps in which it
                runs. Therefore $\left|y\right| = O \left(\left|x\right|^{k_1}\right)$, which is to say that the runtime
                of the second step is $O \left(\left|x\right|^{k_1 \cdot k_2}\right)$. Therefore, the runtime of both
                steps is $O \left(\left|x\right|^{k_1 \cdot k_2}\right)$, where $k_1$ and $k_2$ are both constants.
        \end{itemize}
    \end{proof}
\end{theorem}

Let us recall the definitions of $\C$-hard, and $\C$-complete. $L \in NP-hard$ \textbf{if and only if} for every $L' \in
NP$, $L' \leq_p L$. $L \in NP-complete$ \textbf{if and only if} $L \in NP$ and $L \in NP-hard$.

Now, $P = NP$? Worth a million dollars, and 100\% in the course (which is frankly the important thing here), but there
are better ways to earn a million dollars, and easier ways to get 100\% in this course. \\
If $L \in NPC$ (NP-complete), and also $L \in P$, then $P = NP$, and if $L \in NPC$, and also $L \notin P$ then $P \ne
NP$. \\
Explanation: If $L \in NPC$, then $L \in NP-hard$, which is to say for every $L' \in NP$, then $L' \leq_p L$. If in
addition $L \in P$, then according to the reduction theorem, $L' \in P$, which is to say that $NP \subseteq P$, and
therefore $P = NP$.
% section Extension of reduction (end)

\section{NPC languages}\label{sec:NPC languages} % (fold)
\subsection{3SAT}\label{sub:3SAT} % (fold)

A first example of an NPC language: \[
    3SAT = \left\{\varphi : \varphi \text{ is a 3CNF expression, and also } \varphi \text{ satisfies} \right\}
\]
Reminder: A boolean expression will be called CNF if it is of the following structure: Constructed from statements, and
within each statement is boolean variables separated by logical ors. Between each statement, are logical ands. An
expression will be called 3CNF if in each statement there are exactly 3 literals, which is to say 3 variables. An
expression $\varphi$ will be called satisfying \textbf{if and only if} there is a placement that satisfies the variables, which
is to say, a placement of the values True or false on the variables such that the overall result of $\varphi$ is true.

\begin{theorem}[]
    \[
        3SAT \in NPC
    \]
    \begin{proof}[Proof ]
        We need to show \begin{enumerate}
            \item $3SAT \in NP$: \\
                We will show that $3SAT \in NP$, which is to say, to show that there exists a polynomial DTM that
                decides 3SAT. The machine $M$: \begin{itemize}
                    \item Will produce an expression of the structure 3CNF (easy)
                    \item Will guess a placement, and verify that the placement satisfies $\varphi$
                \end{itemize}
                The runtime is polynomial, for obvious reasons. The correctness follows from if the placement satisfies,
                then there is a run that accepts, and if not, then there is not.
            \item $3SAT \in NPH$ - next week.
        \end{enumerate}
    \end{proof}
\end{theorem}
% subsection 3SAT (end)

\subsection{CLIQUE}\label{sub:CLIQUE} % (fold)
Second example of an NCP language: \[
    CLIQUE = \left\{\left(G, k\right) : G \text{ is an undirected graph, } k \text{ is a natural number, and there
    exists in } G \text{ a clique of size } k\right\}
\]
This is to say, that there exists a subset of edges of size $k$, such that for every 2 nodes in the set, they are
connected by an edge.

\begin{theorem}[]
    CLIQUE is NPC
    \begin{proof}[Proof ]
        \begin{itemize}
            \item We need to show that $CLIQUE \in NP$. \\
                We will show a polynomial NTM that decides CLIQUE. The machine will take an input $\left(G, k\right)$,
                and will non deterministically guess a subset $S$ of nodes, and then will check deterministically the
                following: \begin{enumerate}
                    \item Count how many nodes are in $S$, and if it is different from $k$, stop on $q_{\text{rej} }$
                    \item For every pair of nodes in $S$, check if there is an edge between them. If we find a pair in
                        $S$ without an edge between them, then stop on $q_{\text{rej} }$. If there is an edge between
                        every pair of nodes in $S$, then stop on $q_{\text{acc}} $.
                \end{enumerate}
                Correctness: If $\left(G, k\right) \in CLIQUE$, then there exists a subset $S$ of edges in $G$, such
                that $k = \left|S\right|$, and also between every pair of edges in $S$, there is an edge. Therefore, if
                the machine $M$ will guess $S$, then it will stop on $q_{\text{acc} }$. If $\left(G, k\right) \notin
                CLIQUE$, then for every set $S$, it is either not of size $k$, or there is a pair of nodes that are not
                connected by an edge, and therefore in all cases, $M$ will stop on $q_{\text{rej} }$. \\
                Runtime: A guess $S$ is bound by the length of the input. Counting the size of $S$ takes place in $O
                \left(n\right)$. Checking the edges: $O \left(k^2\right)$ pairs, and for every pair, $O \left(n\right)$,
                so overall $O \left(n^3\right)$, which is to say a polynomial runtime.
            \item We need to show that $CLIQUE$ is NP hard. \\
                This is to say that $\forall L' \in NP$, there is a reduction $L' \leq_p CLIQUE$. We will show "only" a
                reduction from $3SAT \leq_p CLIQUE$. Since $3SAT \in NPH$, it is true that $\forall L' \in NP,\ L'
                \leq_p 3SAT$. We have shown that polynomial reductions are closed to compounding, and therefore we can
                conclude that $\forall L' \in NP,\ L' \leq_p CLIQUE$, which is to say $CLIQUE \in NPH$. We need to show
                that $3SAT \leq_p CLIQUE$: This is to say that there exists a function $f$, and a TM $M_f$, such that
                $M_f$ computes $f$, in polynomial time, and also $f$ is a reduction function, which is to say \[
                    \varphi \in 3SAT \Leftrightarrow f \left(\varphi\right) \in CLIQUE
                \]
                where $f \left(\varphi\right) = \left(G, k\right)$. So \[
                    \varphi \text{ is 3CNF satisfiable} \Leftrightarrow G \text{ has a CLIQUE of size } k
                \]
                Construction: Given a statement $\varphi$, the machine $M_f$ will run as follows: \begin{enumerate}
                    \item Check if $\varphi$ is of the structure $3CNF$ (easy). If not, return $\left(G, k\right) \notin
                        CLIQUE$, for example, $G$ has 3 nodes, $k = 100$.
                    \item W.l.o.g. $\varphi$ is of the structure $3CNF$. $M_f$ will run as follows: For all statements in
                        $\varphi$, we will define 7 nodes, one for every placement that satisfies the statement. Between
                        every pair of nodes, $M_f$ will make a connection, aside from when they are related to a shared
                        variable, and do not agree on its placement. $k$ will be the number of statements in $\varphi$. \\
                \end{enumerate}
                        Example: \[
                            \varphi = \left(x_1 \lor \overline{x_2} \lor x_3\right) \land \left(x_1 \lor \overline{x_3}
                            \lor \overline{x_4}\right)
                        \]
\begin{center}
    \begin{tikzpicture}[node distance=2cm]
        \node[state, initial] (q00) {000};
        \node[state, right of=q00] (q01) {001};
        \node[state, right of=q01] (q02) {011};
        \node[state, right of=q02] (q03) {100};
        \node[state, right of=q03] (q04) {101};
        \node[state, right of=q04] (q05) {110};
        \node[state, right of=q05] (q06) {111};

        \node[state, below of=q00] (q10) {000};
        \node[state, below of=q01] (q11) {001};
        \node[state, below of=q02] (q12) {010};
        \node[state, below of=q03] (q13) {100};
        \node[state, below of=q04] (q14) {101};
        \node[state, below of=q05] (q15) {110};
        \node[state, below of=q06] (q16) {111};

        \draw   (q00) edge[] node{} (q10)
                (q00) edge[] node{} (q11)
                (q00) edge[] node{} (q16)
                ;
    \end{tikzpicture} \\
\end{center}
                        Filling out the rest of the edges is left as an exercise for the reader. We create a graph, 7
                        wide, and $m$, the number of statements in $\varphi$, deep.

                        Runtime: Creating edges: This is polynomial in $\varphi$, since there are $7m$ edges, and $m <
                        \left|\varphi\right|$. Connecting the edges: This needs to pass over every pair of edges $O
                        \left(\left(7m\right)^2\right)$, which is to say $O \left(m^2\right)$, and for every pair we need
                        to check: If we do not have shared variables, we make an edge. If we do have shared variables,
                        and we give the shared variables equivalent values, we will connect an edge, and otherwise will
                        not. This takes $O \left(\left|\varphi\right|\right)$ for every pair, and we thus have an overall
                        runtime of $O \left(\left|\varphi\right|^3\right)$. \\
                        Correctness: We need to show that if $\varphi \in 3SAT$, then $\left(G, k\right) \in CLIQUE$. This
                        is to say if $\varphi$ is a satisfying $3SAT$ statement, then $G$ contains a CLIQUE of size $k$..
                        We will look at a placement A that satisfies $\varphi$. For every statement, we will choose a node
                        (from the 7-tuple), that is suitable to the placement that agrees with $A$. We will note that
                        $A$ is a satisfying placement, and therefore is relevant to precisely  1 node of all the
                        7-tuple. We shall theorise that the set $S$ of nodes that we chose is a clique in $G$, of size
                        $k$. It is of size $k$ since in $S$ there is exactly one node for every layer / statement. It is
                        a clique since every pair of nodes in $S$ are connected by an edge. We will look at  a pair of
                        nodes in $S$. If they are not matched to a shared variable, according to the construction, they
                        must have an edge between them. If they do have a shared variable, since the placement for every
                        statement is related to the general placement $A$, then they satisfy the placement for shared
                        variables, which is to say, according to the construction, there is an edge between the pair of
                        nodes. \\
                        Let us consider the other direction: If $\left(G, k\right) \in CLIQUE$, then $\varphi \in 3SAT$. We
                        will look at the subset $S$ of nodes, which is a clique in $G$ of size $k$. We will note that
                        $S$ necessarily contains a single node from each layer. It cannot be more than 1 since in each
                        layer there are no edges, and $S$ is a clique. It cannot be less than 1, since the size of the
                        clique is the number of layers. We will define a placement $A$ through $S$. For every statement,
                        the node in $S$ from the relevant layer defines a placement for the variables of the statement.
                        We will note that a pair of nodes that handle a shared variable agree on its placement, since
                        $S$ is a clique, which is to say they are connected by an edge, and therefore we have received a
                        a placement for all the variables. Additionally, every node is relevant to a placement according
                        to the statement that satisfies it, and since there is in $S$ a node in every layer, the
                        placement $A$ satisfies all the statements, which is to say, it satisfies $\varphi$, which is to
                        say that $\varphi \in 3SAT$.
        \end{itemize}
    \end{proof}
\end{theorem}
% subsection CLIQUE (end)
% section NPC languages (end)

\section{Alternative definition of NP}\label{sec:Alternative definition of NP} % (fold)
A DTM  $M$ is a \textbf{polynomial verifier} for the language $L$. If $M$ accepts a pair of inputs $\left(w, c\right)$,
and runs in polynomial over $\left|w\right|$, and it is true that \begin{itemize}
    \item For all $w \in L$, there exists $c$ such that $M \left(w, c\right) = q_{\text{acc} }$.
    \item Fir all $w \notin L$, and for all $c$ $M \left(w, c\right) = q_{\text{rej} }$
\end{itemize}
We will define $NP'$ to be the set of all languages $L$ which have a polynomial verifier.

\begin{theorem}[NP = NP']
    Example: We want to show that there is a polynomial verifier for the language CLIQUE. $w$ will be a pair $\left(G,
    k\right)$, which is a candidate for being in $CLIQUE$. $c$ will be a witness to the presence, and in this case is
    meant to represent the clique in $G$, of size $k$. The deterministic machine $M$ will check if $c$ is a set of $k$
    nodes, and if between every pair of nodes there is an edge. If so, $M$ will return $q_{\text{acc} }$, and otherwise,
    $M$ returns $q_{\text{rej} }$. \\
    Correctness: If $\left(G, k\right) \in CLIQUE$, then the placement of $c$ to be a clique of size $k$ will enable $M$
    to return $q_{\text{acc} }$. If $\left(G, k\right) \notin CLIQUE$, then for every placement of $c$, running $M$ will
    result in $q_{\text{rej} }$. \\
    Runtime: Easy to show that it is polynomial in $\left|\left(G, k\right)\right|$.
\end{theorem}
% section Alternative definition of NP (end)


\end{document}
